User(userID string) (st *User, err error) {
UserAvatar(userID string) (img image.Image, err error) {
UserAvatarDecode(u *User) (img image.Image, err error) {
UserUpdate(email, password, username, avatar, newPassword string) (st *User, err error) {
UserUpdateStatus(status Status) (st *Settings, err error) {

UserChannels() (st []*Channel, err error) {
UserChannelCreate(recipientID string) (st *Channel, err error) {

UserGuilds(limit int, beforeID, afterID string) (st []*UserGuild, err error) {
UserGuildSettingsEdit(guildID string, settings *UserGuildSettingsEdit) (st *UserGuildSettings, err error) {

UserChannelPermissions(userID, channelID string) (apermissions int64, err error) {

Guild(guildID string) (st *Guild, err error) {
GuildPreview(guildID string) (st *GuildPreview, err error) {
GuildCreate(name string) (st *Guild, err error) {
GuildEdit(guildID string, g GuildParams) (st *Guild, err error) {
GuildDelete(guildID string) (st *Guild, err error) {
GuildLeave(guildID string) (err error) {

GuildBans(guildID string) (st []*GuildBan, err error) {
GuildBanCreate(guildID, userID string, days int) (err error) {
GuildBan(guildID, userID string) (st *GuildBan, err error) {
GuildBanCreateWithReason(guildID, userID, reason string, days int) (err error) {
GuildBanDelete(guildID, userID string) (err error) {

GuildMembers(guildID string, after string, limit int) (st []*Member, err error) {
GuildMember(guildID, userID string) (st *Member, err error) {
GuildMemberAdd(accessToken, guildID, userID, nick string, roles []string, mute, deaf bool) (err error) {
GuildMemberDelete(guildID, userID string) (err error) {
GuildMemberDeleteWithReason(guildID, userID, reason string) (err error) {
GuildMemberEdit(guildID, userID string, roles []string) (err error) {
GuildMemberMove(guildID string, userID string, channelID *string) (err error) {
GuildMemberNickname(guildID, userID, nickname string) (err error) {
GuildMemberMute(guildID string, userID string, mute bool) (err error) {
GuildMemberTimeout(guildID string, userID string, until *time.Time) (err error) {
GuildMemberDeafen(guildID string, userID string, deaf bool) (err error) {
GuildMemberRoleAdd(guildID, userID, roleID string) (err error) {
GuildMemberRoleRemove(guildID, userID, roleID string) (err error) {

GuildChannels(guildID string) (st []*Channel, err error) {
GuildChannelCreateComplex(guildID string, data GuildChannelCreateData) (st *Channel, err error) {
GuildChannelCreate(guildID, name string, ctype ChannelType) (st *Channel, err error) {
GuildChannelsReorder(guildID string, channels []*Channel) (err error) {

GuildInvites(guildID string) (st []*Invite, err error) {

GuildRoles(guildID string) (st []*Role, err error) {
GuildRoleCreate(guildID string) (st *Role, err error) {
GuildRoleEdit(guildID, roleID, name string, color int, hoist bool, perm int64, mention bool) (st *Role, err error) {
GuildRoleReorder(guildID string, roles []*Role) (st []*Role, err error) {
GuildRoleDelete(guildID, roleID string) (err error) {

GuildPruneCount(guildID string, days uint32) (count uint32, err error) {
GuildPrune(guildID string, days uint32) (count uint32, err error) {

GuildIntegrations(guildID string) (st []*Integration, err error) {
GuildIntegrationCreate(guildID, integrationType, integrationID string) (err error) {
GuildIntegrationEdit(guildID, integrationID string, expireBehavior, expireGracePeriod int, enableEmoticons bool) (err error) {
GuildIntegrationDelete(guildID, integrationID string) (err error) {
GuildIntegrationSync(guildID, integrationID string) (err error) {

GuildIcon(guildID string) (img image.Image, err error) {
GuildSplash(guildID string) (img image.Image, err error) {

GuildEmbed(guildID string) (st *GuildEmbed, err error) {
GuildEmbedEdit(guildID string, enabled bool, channelID string) (err error) {

GuildAuditLog(guildID, userID, beforeID string, actionType, limit int) (st *GuildAuditLog, err error) {

GuildEmojis(guildID string) (emoji []*Emoji, err error) {
GuildEmojiCreate(guildID, name, image string, roles []string) (emoji *Emoji, err error) {
GuildEmojiEdit(guildID, emojiID, name string, roles []string) (emoji *Emoji, err error) {
GuildEmojiDelete(guildID, emojiID string) (err error) {

Channel(channelID string) (st *Channel, err error) {
ChannelEdit(channelID, name string) (*Channel, error) {
ChannelEditComplex(channelID string, data *ChannelEdit) (st *Channel, err error) {
ChannelDelete(channelID string) (st *Channel, err error) {
ChannelTyping(channelID string) (err error) {

ChannelMessages(channelID string, limit int, beforeID, afterID, aroundID string) (st []*Message, err error) {
ChannelMessage(channelID, messageID string) (st *Message, err error) {
ChannelMessageAck(channelID, messageID, lastToken string) (st *Ack, err error) {
ChannelMessageSend(channelID string, content string) (*Message, error) {
ChannelMessageSendComplex(channelID string, data *MessageSend) (st *Message, err error) {
ChannelMessageSendTTS(channelID string, content string) (*Message, error) {
ChannelMessageSendEmbed(channelID string, embed *MessageEmbed) (*Message, error) {
ChannelMessageSendEmbeds(channelID string, embeds []*MessageEmbed) (*Message, error) {
ChannelMessageSendReply(channelID string, content string, reference *MessageReference) (*Message, error) {
ChannelMessageEdit(channelID, messageID, content string) (*Message, error) {
ChannelMessageEditComplex(m *MessageEdit) (st *Message, err error) {
ChannelMessageEditEmbed(channelID, messageID string, embed *MessageEmbed) (*Message, error) {
ChannelMessageEditEmbeds(channelID, messageID string, embeds []*MessageEmbed) (*Message, error) {
ChannelMessageDelete(channelID, messageID string) (err error) {
ChannelMessagesBulkDelete(channelID string, messages []string) (err error) {
ChannelMessagePin(channelID, messageID string) (err error) {
ChannelMessageUnpin(channelID, messageID string) (err error) {
ChannelMessagesPinned(channelID string) (st []*Message, err error) {

ChannelFileSend(channelID, name string, r io.Reader) (*Message, error) {
ChannelFileSendWithMessage(channelID, content string, name string, r io.Reader) (*Message, error) {

ChannelInvites(channelID string) (st []*Invite, err error) {
ChannelInviteCreate(channelID string, i Invite) (st *Invite, err error) {

ChannelPermissionSet(channelID, targetID string, targetType PermissionOverwriteType, allow, deny int64) (err error) {
ChannelPermissionDelete(channelID, targetID string) (err error) {
ChannelMessageCrosspost(channelID, messageID string) (st *Message, err error) {
ChannelNewsFollow(channelID, targetID string) (st *ChannelFollow, err error) {

// Invite(inviteID string) (st *Invite, err error) {
// InviteDelete(inviteID string) (st *Invite, err error) {

Gateway() (gateway string, err error) {
GatewayBot() (st *GatewayBotResponse, err error) {

// +WebhookCreate(channelID, name, avatar string) (st *Webhook, err error) {
// +ChannelWebhooks(channelID string) (st []*Webhook, err error) {
// +GuildWebhooks(guildID string) (st []*Webhook, err error) {
// +Webhook(webhookID string) (st *Webhook, err error) {
// +WebhookEdit(webhookID, name, avatar, channelID string) (st *Role, err error) {
// +WebhookDelete(webhookID string) (err error) {
// +WebhookExecute(webhookID, token string, wait bool, data *WebhookParams) (st *Message, err error) {
// +WebhookMessage(webhookID, token, messageID string) (message *Message, err error) {
// +WebhookMessageEdit(webhookID, token, messageID string, data *WebhookEdit) (st *Message, err error) {
// +WebhookMessageDelete(webhookID, token, messageID string) (err error) {

MessageReactionAdd(channelID, messageID, emojiID string) error {
MessageReactionRemove(channelID, messageID, emojiID, userID string) error {
MessageReactionsRemoveAll(channelID, messageID string) error {
MessageReactionsRemoveEmoji(channelID, messageID, emojiID string) error {
MessageReactions(channelID, messageID, emojiID string, limit int, beforeID, afterID string) (st []*User, err error) {

ApplicationCommandCreate(appID string, guildID string, cmd *ApplicationCommand) (ccmd *ApplicationCommand, err error) {
ApplicationCommandEdit(appID, guildID, cmdID string, cmd *ApplicationCommand) (updated *ApplicationCommand, err error) {
ApplicationCommandBulkOverwrite(appID string, guildID string, commands []*ApplicationCommand) (createdCommands []*ApplicationCommand, err error) {
ApplicationCommandDelete(appID, guildID, cmdID string) error {
ApplicationCommand(appID, guildID, cmdID string) (cmd *ApplicationCommand, err error) {
ApplicationCommands(appID, guildID string) (cmd []*ApplicationCommand, err error) {

InteractionRespond(interaction *Interaction, resp *InteractionResponse) (err error) {
InteractionResponse(appID string, interaction *Interaction) (*Message, error) {
InteractionResponseEdit(appID string, interaction *Interaction, newresp *WebhookEdit) (*Message, error) {
InteractionResponseDelete(appID string, interaction *Interaction) error {

FollowupMessageCreate(appID string, interaction *Interaction, wait bool, data *WebhookParams) (*Message, error) {
FollowupMessageEdit(appID string, interaction *Interaction, messageID string, data *WebhookEdit) (*Message, error) {
FollowupMessageDelete(appID string, interaction *Interaction, messageID string) error {
